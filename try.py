import boto3
import pandas as pd
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

#----------------------------------minio connection----------------------------------
minio_url = 'http://172.18.0.3:9000'

s3_client = None
try:
    logging.info(f"Tentative de connexion √† {minio_url}")
    s3_client = boto3.client(
        's3',
        endpoint_url=minio_url,
        aws_access_key_id='minio',
        aws_secret_access_key='minio123',
        region_name='us-east-1'
    )
    
    # Test de connexion
    buckets = s3_client.list_buckets()
    logging.info(f"‚úÖ Connexion r√©ussie avec: {minio_url}")
    logging.info(f"Buckets disponibles: {[b['Name'] for b in buckets['Buckets']]}")
    
except Exception as e:
    logging.error(f"‚ùå √âchec avec {minio_url}: {e}")
    
    # V√©rification finale
    if s3_client is None:
        raise ConnectionError("‚ùå Impossible de se connecter √† MinIO")

#---------------get coinmarket-transform data and display with pandas---------------
bucket_name = 'coinmarkettransform'
object_name = 'cleaned_data.csv'

try:
    logging.info(f"üì¶ Acc√®s au bucket: {bucket_name}")
    
    # V√©rifier si le bucket existe
    try:
        s3_client.head_bucket(Bucket=bucket_name)
        logging.info(f"‚úÖ Bucket '{bucket_name}' existe")
    except Exception as e:
        logging.error(f"‚ùå Bucket '{bucket_name}' n'existe pas: {e}")
        raise
    
    # Lister les objets dans le bucket
    response = s3_client.list_objects_v2(Bucket=bucket_name)
    if 'Contents' in response:
        logging.info(f"üìÅ Objets dans le bucket '{bucket_name}':")
        for obj in response['Contents']:
            logging.info(f"   üìÑ {obj['Key']} (taille: {obj['Size']} bytes)")
    else:
        logging.warning(f"‚ö†Ô∏è Aucun objet trouv√© dans le bucket '{bucket_name}'")
    
    # T√©l√©charger le fichier CSV
    logging.info(f"‚¨áÔ∏è T√©l√©chargement de {object_name}...")
    s3_client.download_file(bucket_name, object_name, f'/tmp/{object_name}')
    logging.info(f"‚úÖ Fichier t√©l√©charg√© vers /tmp/{object_name}")
    
    # Lire et afficher les donn√©es avec pandas
    logging.info("üìä Lecture des donn√©es avec pandas...")
    df = pd.read_csv(f'/tmp/{object_name}')
    
    print("\n" + "="*80)
    print(f"üìä DONN√âES DU BUCKET '{bucket_name}' - FICHIER '{object_name}'")
    print("="*80)
    
    print(f"\nüìà Informations g√©n√©rales:")
    print(f"   ‚Ä¢ Nombre de lignes: {len(df)}")
    print(f"   ‚Ä¢ Nombre de colonnes: {len(df.columns)}")
    print(f"   ‚Ä¢ Colonnes: {list(df.columns)}")
    
    print(f"\nüìã Aper√ßu des donn√©es (5 premi√®res lignes):")
    print(df.head().to_string(index=False))
    
    print(f"\nüìä Statistiques descriptives:")
    print(df.describe().to_string())
    
    print(f"\nüîç Types de donn√©es:")
    print(df.dtypes.to_string())
    
    print(f"\n‚ùì Valeurs manquantes par colonne:")
    missing_values = df.isnull().sum()
    for col, missing in missing_values.items():
        if missing > 0:
            print(f"   ‚Ä¢ {col}: {missing} valeurs manquantes")
        else:
            print(f"   ‚Ä¢ {col}: Aucune valeur manquante")
    
    print("\n" + "="*80)
    print("valeur unique dans price:")
    print(df['price'].unique())
    
except Exception as e:
    logging.error(f"‚ùå Erreur lors de l'acc√®s aux donn√©es: {e}")
    logging.error(f"‚ùå D√©tails de l'erreur: {type(e).__name__}: {str(e)}")